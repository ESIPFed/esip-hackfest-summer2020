Design notes

sample csv: file.csv

(CSV file header) 6 fields total 
topic,name,website,publication,conf-level,identifier

DictReader returns:
OrderedDict([('topic', 'Flooding'), ('name', 'GFMS')...etc])



@app.route('/api')
def session_api():
    return jsonify(list()) #list of relevant dataset nodes



@api.route('/api')
class Get(Resource):

    def get(self):
        return jsonify(objects)





# Save results for specified topic to a JSON file

# Usage cases dictionary
usages = {} 

# Iterates through returned applications
for(a in applications):
    usages[a] = {'name': application.name, 
    'website': application.website, 'year_published' = application.year}

# Iterates through returned papers
for(p in papers):
    usages[p] = {'title': paper.title, 'doi': paper.doi, 'year': paper.year}

with open('usages.json', 'w') as usage_file:
    json.dump(usages, usage_file)



Alternate to py2neo

# uri = "neo4j://localhost:7687"
# driver = GraphDatabase.driver(uri, auth=("neo4j", "password"))

# session = driver.session(SessionConfig.forDatabase( "Applications" ))

# Using official Neo4j Python Driver
            # session.write_transaction(assign_topic, line['name'], line['topic'])

def assign_topic(tx, application, topic):
    tx.run("CREATE (a:Application {name: $application})-[:RELATES_TO]->(t:Topic {name: $topic})", application=application, topic=topic)

